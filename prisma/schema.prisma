generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  email      String      @unique
  name       String?
  role       Role        @default(USER)
  createdAt  DateTime    @default(now())
  password   String?
  OAuthToken OAuthToken?
  Profile    Profile?
  Project    Project[]
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Project {
  id          String       @id @default(uuid()) @db.Uuid
  name        String
  gitUrl      String
  description String?
  ownerId     Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deployments Deployment[]
  FailedJob   FailedJob[]
  owner       User         @relation(fields: [ownerId], references: [id])

  @@index([name])
  @@index([gitUrl])
}

model Deployment {
  id          String           @id @default(uuid()) @db.Uuid
  projectId   String           @db.Uuid
  environment Environment      @default(DEVELOPMENT)
  status      DeploymentStatus @default(INACTIVE)
  url         String?
  logsUrl     String?
  version     String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  autoDeploy  Boolean          @default(false)
  project     Project          @relation(fields: [projectId], references: [id])
  FailedJob   FailedJob[]

  @@index([environment])
  @@index([status])
}

model FailedJob {
  id              String          @id @default(uuid()) @db.Uuid
  queueName       String
  jobId           String          @unique
  deploymentId    String?         @db.Uuid
  projectId       String?         @db.Uuid
  errorMessage    String
  failedAt        DateTime        @default(now())
  status          FailedJobStatus @default(PENDING)
  retryCount      Int             @default(0)
  lastProcessedAt DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deployment      Deployment?     @relation(fields: [deploymentId], references: [id])
  project         Project?        @relation(fields: [projectId], references: [id])

  @@index([queueName])
  @@index([status])
}

model OAuthToken {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum Role {
  USER
  ADMIN
}

enum DeploymentStatus {
  PENDING
  ACTIVE
  FAILED
  INACTIVE
}

enum Environment {
  PRODUCTION
  STAGING
  DEVELOPMENT
}

enum FailedJobStatus {
  PENDING
  RETRYING
  RESOLVED
  ESCALATED
  DISCARDED
}
